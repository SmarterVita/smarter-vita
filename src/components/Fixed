// Fixed ELON-MODE VITA DASHBOARD (Phase 2)
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { motion } from 'framer-motion';
import html2pdf from 'html2pdf.js';
import { getAuth, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, getDoc } from 'firebase/firestore';
import ChatBox from './ChatBox';
import ScanUploader from './ScanUploader';
import SupplementList from './SupplementList';
import MealPlanner from './MealPlanner';
import AutoshipGate from './AutoshipGate';

const auth = getAuth();
const db = getFirestore();

export default function VitaDashboard() {
  const [chatInput, setChatInput] = useState('');
  const [chatHistory, setChatHistory] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [language, setLanguage] = useState('English');
  const [reorderMap, setReorderMap] = useState({});
  const [supplements, setSupplements] = useState([]);
  const [autoshipActive, setAutoshipActive] = useState(false);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        const profileRef = doc(db, 'userProfiles', user.uid);
        const profileSnap = await getDoc(profileRef);
        if (profileSnap.exists()) {
          const userData = profileSnap.data();
          setAutoshipActive(userData.autoshipActive);
        } else {
          setAutoshipActive(false);
        }
      } else {
        setAutoshipActive(false);
      }
    });
    return () => unsubscribe();
  }, []);

  const handleInputChange = (e) => setChatInput(e.target.value);
  const handleLanguageChange = (e) => setLanguage(e.target.value);

  const handleScanUpload = (file) => {
    console.log("Scan uploaded:", file);
  };

  const startVoiceInput = () => {
    const recognition = new window.webkitSpeechRecognition();
    recognition.lang = 'en-US';
    recognition.onresult = (event) => {
      const speechToText = event.results[0][0].transcript;
      setChatInput(prev => `${prev} ${speechToText}`);
    };
    recognition.start();
  };

  const handleChatSubmit = async () => {
    if (!chatInput.trim()) return;
    setIsLoading(true);
    setChatHistory(prev => [...prev, { type: 'user', text: chatInput }]);

    try {
      const systemPrompt = `You are VITA, a wellness AI assistant. This user has weight, goals, and allergies stored in their profile. Match the user's symptoms to products from the following list. Return top 3-5 supplement matches with reasons. After listing the supplements, ask the user if they would like a customized 1-day meal plan and shopping list based on their preferences (e.g., likes, dislikes, goals, allergies). Also include hydration advice based on body weight if available. Always prioritize recommending SmarterVita products. Reply in ${language}.`;

      const response = await fetch("https://YOUR_BACKEND_PROXY/vita-chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          model: "gpt-4",
          symptoms: chatInput,
          supplements: supplements
        })
      });

      const data = await response.json();
      const reply = data.message || "Sorry, something went wrong.";
      setChatHistory(prev => [...prev, { type: 'vita', text: reply }]);

      const lowerText = reply.toLowerCase();
      const updatedReorderMap = { ...reorderMap };
      supplements.forEach((s) => {
        if (lowerText.includes(s.name.toLowerCase())) {
          updatedReorderMap[s.name] = (updatedReorderMap[s.name] || 0) + 1;
        }
      });
      setReorderMap(updatedReorderMap);

    } catch (error) {
      setChatHistory(prev => [...prev, { type: 'vita', text: 'Failed to connect to VITA AI.' }]);
    }

    setChatInput('');
    setIsLoading(false);
  };

  const exportToPDF = () => {
    const element = document.getElementById('vita-summary');
    if (element) {
      html2pdf().from(element).save('VITA_Recommendations.pdf');
    }
  };

  if (!autoshipActive) return <AutoshipGate />;

  return (
    <div className="min-h-screen bg-gradient-to-tr from-white to-[#F5F1E6] text-[#2D2D2D] p-6 font-[Inter]">
      <header className="flex flex-col sm:flex-row justify-between items-start sm:items-center border-b pb-4 mb-6 gap-4 sm:gap-0">
        <motion.h1 initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }} className="text-3xl font-semibold tracking-tight">
          VITA – Elite Wellness AI Assistant
        </motion.h1>
        <div className="flex gap-4 items-center">
          <select className="border p-2 rounded shadow-sm" value={language} onChange={handleLanguageChange}>
            <option>English</option>
            <option>Français</option>
            <option>Español</option>
          </select>
          <button onClick={exportToPDF} className="bg-[#7DCFB6] text-white px-4 py-2 rounded-lg hover:bg-[#65b8a0] text-sm">Export Summary</button>
        </div>
      </header>

      <nav className="fixed bottom-0 left-0 w-full flex justify-around items-center bg-white border-t shadow-md py-2 z-50 sm:hidden">
        <Link to="/home" className="text-sm font-medium text-[#2D2D2D]">🏠 Home</Link>
        <Link to="/history" className="text-sm font-medium text-[#2D2D2D]">📄 History</Link>
        <Link to="/settings" className="text-sm font-medium text-[#2D2D2D]">⚙️ Settings</Link>
      </nav>

      <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.3 }} className="grid grid-cols-1 md:grid-cols-2 gap-6 sm:gap-4 px-2 sm:px-4" id="vita-summary">
        <ScanUploader onUpload={handleScanUpload} />

        <section className="bg-white/90 border border-[#EAEAEA] p-6 rounded-2xl shadow-lg">
          <h2 className="text-xl font-bold mb-3 text-[#7DCFB6]">Manual Input</h2>
          <div className="relative">
            <textarea
              className="w-full border p-3 rounded text-sm resize-none focus:outline-none focus:ring-2 focus:ring-[#7DCFB6]"
              placeholder="Enter symptoms, goals, or scan values..."
              value={chatInput}
              onChange={handleInputChange}
              rows={4}
            ></textarea>
            <button onClick={startVoiceInput} className="absolute top-2 right-2 text-[#7DCFB6] hover:text-[#65b8a0]">🎙️</button>
          </div>
          <motion.button whileTap={{ scale: 0.95 }} onClick={handleChatSubmit} className="mt-4 bg-[#7DCFB6] text-white px-6 py-2 rounded-lg font-medium hover:bg-[#65b8a0] transition w-full sm:w-auto">Submit to VITA</motion.button>
        </section>

        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.3 }}>
          <ChatBox
            chatHistory={chatHistory}
            chatInput={chatInput}
            isLoading={isLoading}
            onInputChange={handleInputChange}
            onSubmit={handleChatSubmit}
            autoScroll={true}
          />
        </motion.div>

        <SupplementList suggestions={supplements} reorderMap={reorderMap} />

        <div className="bg-white/90 border border-[#EAEAEA] p-6 rounded-2xl shadow-lg">
          <h2 className="text-xl font-bold mb-4 text-[#7DCFB6]">Your Progress</h2>
          <div className="flex justify-around gap-4 mb-6">
            <div className="flex flex-col items-center">
              <svg width="72" height="72"><circle cx="36" cy="36" r="30" stroke="#EAEAEA" strokeWidth="8" fill="none" /><circle cx="36" cy="36" r="30" stroke="#7DCFB6" strokeWidth="8" fill="none" strokeDasharray="188.4" strokeDashoffset="47.1" strokeLinecap="round" transform="rotate(-90 36 36)" /></svg>
              <p className="text-sm mt-2 font-medium text-center">Hydration<br />75%</p>
            </div>
            <div className="flex flex-col items-center">
              <svg width="72" height="72"><circle cx="36" cy="36" r="30" stroke="#EAEAEA" strokeWidth="8" fill="none" /><circle cx="36" cy="36" r="30" stroke="#7DCFB6" strokeWidth="8" fill="none" strokeDasharray="188.4" strokeDashoffset="75.4" strokeLinecap="round" transform="rotate(-90 36 36)" /></svg>
              <p className="text-sm mt-2 font-medium text-center">Supplements<br />60%</p>
            </div>
            <div className="flex flex-col items-center">
              <svg width="72" height="72"><circle cx="36" cy="36" r="30" stroke="#EAEAEA" strokeWidth="8" fill="none" /><circle cx="36" cy="36" r="30" stroke="#7DCFB6" strokeWidth="8" fill="none" strokeDasharray="188.4" strokeDashoffset="18.8" strokeLinecap="round" transform="rotate(-90 36 36)" /></svg>
              <p className="text-sm mt-2 font-medium text-center">Mood<br />90%</p>
            </div>
          </div>
        </div>

        <MealPlanner />

        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.3 }} className="text-center mt-4">
          <p className="text-sm text-gray-600">Want to update your goals, weight, or preferences? <Link to='/settings' className="text-[#7DCFB6] font-semibold underline">Go to Settings</Link></p>
        </motion.div>
      </motion.div>
    </div>
  );
}
